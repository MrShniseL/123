import os
import sys
import logging
import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telebot.async_telebot import AsyncTeleBot
from telebot.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           KeyboardButton, ReplyKeyboardMarkup, BotCommand)

# --- –ë–õ–û–ö –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ò –ö–û–ù–°–¢–ê–ù–¢ ---
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
SESSION_TIMEOUT = 30  # –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s - (%(filename)s:%(lineno)d)',
    handlers=[
        logging.FileHandler("bot_activity.log", encoding="utf-8"),
        logging.StreamHandler(sys.stdout)
    ]
)

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä —Å —Ü–µ–Ω–∞–º–∏
PROCEDURES = {
    "comp1": {"name": "–ö–æ–º–ø–ª–µ–∫—Å 1 (–ø–æ–¥–º—ã—à–∫–∏-–≥–ª—É–±–æ–∫–æ–µ –±–∏–∫–∏–Ω–∏)", "price": 1550},
    "comp2": {"name": "–ö–æ–º–ø–ª–µ–∫—Å 2 (–ø–æ–¥–º—ã—à–∫–∏-–≥–ª—É–±–æ–∫–æ–µ –±–∏–∫–∏–Ω–∏-–≥–æ–ª–µ–Ω–∏)", "price": 2590},
    "comp3": {"name": "–ö–æ–º–ø–ª–µ–∫—Å 3 (–ø–æ–¥–º—ã—à–∫–∏-–≥–ª—É–±–æ–∫–æ–µ –±–∏–∫–∏–Ω–∏-–≥–æ–ª–µ–Ω–∏-–±–µ–¥—Ä–∞)", "price": 3590},
    "armpits": {"name": "–ü–æ–¥–º—ã—à–µ—á–Ω—ã–µ –≤–ø–∞–¥–∏–Ω—ã", "price": 590},
    "classic-bikini": {"name": "–ë–∏–∫–∏–Ω–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ", "price": 890},
    "deep-bikini": {"name": "–ë–∏–∫–∏–Ω–∏ –≥–ª—É–±–æ–∫–æ–µ", "price": 1090},
    "arms-below-elbow": {"name": "–†—É–∫–∏ –Ω–∏–∂–µ –ª–æ–∫—Ç—è", "price": 1190},
    "arms-above-elbow": {"name": "–†—É–∫–∏ –≤—ã—à–µ –ª–æ–∫—Ç—è", "price": 1190},
    "thighs": {"name": "–ë—ë–¥—Ä–∞", "price": 2090},
    "calves": {"name": "–ì–æ–ª–µ–Ω–∏", "price": 2090},
    "upper-lip": {"name": "–í–µ—Ä—Ö–Ω—è—è –≥—É–±–∞", "price": 420},
    "chin": {"name": "–ü–æ–¥–±–æ—Ä–æ–¥–æ–∫", "price": 420},
    "cleavage": {"name": "–î–µ–∫–æ–ª—å—Ç–µ (–≥—Ä—É–¥—å)", "price": 540},
    "areola": {"name": "–û–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ —Å–æ—Å–∫–æ–≤", "price": 420},
    "stomach-line": {"name": "–õ–∏–Ω–∏—è –∂–∏–≤–æ—Ç–∞", "price": 420},
    "full-stomach": {"name": "–ñ–∏–≤–æ—Ç (–ø–æ–ª–Ω–æ—Å—Ç—å—é)", "price": 1090},
    "lower-back": {"name": "–ü–æ—è—Å–Ω–∏—Ü–∞", "price": 840},
    "full-back": {"name": "–°–ø–∏–Ω–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é)", "price": 2090},
    "fingers-and-hands": {"name": "–ü–∞–ª—å—Ü—ã —Ä—É–∫ –∏ –∫–∏—Å—Ç–∏", "price": 480},
    "bet-eyebrows": {"name": "–ú–µ–∂–±—Ä–æ–≤—å–µ", "price": 420},
    "cheeks": {"name": "–©—ë–∫–∏", "price": 420},
    "neck": {"name": "–®–µ—è", "price": 420},
    "toes-and-feet": {"name": "–ü–∞–ª—å—Ü—ã –Ω–æ–≥ –∏ —Å—Ç–æ–ø—ã", "price": 480}
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
STATIC_MESSAGES = {
    "üí∞ –¶–µ–Ω—ã": (
            "üí∞ –ù–∞—à–∏ —Ü–µ–Ω—ã:\n" + "\n".join([f"{v['name']} - {v['price']} —Ä—É–±." for v in PROCEDURES.values()]) +
            "\n\n<i>–í–ù–ò–ú–ê–ù–ò–ï! –î–ª—è –º—É–∂—á–∏–Ω —Ü–µ–Ω–∞ –ª—é–±–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–æ—Ä–æ–∂–µ –Ω–∞ 20%</i>"
    ),
    "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã": (
        "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n"
        "üë© –ú–∞—Å—Ç–µ—Ä: –ö—Ä–∏—Å—Ç–∏–Ω–∞\n"
        "   VK: https://vk.com/id305430186\n"
        "   Instagram: https://www.instagram.com/mrsshnisel\n"
        "   Telegram: https://t.me/MrsEpil\n"
        "   WhatsApp: +79212659800\n"
        "üåê –ù–∞—à–µ VK-—Å–æ–æ–±—â–µ—Å—Ç–≤–æ: https://vk.com/simon_epil\n"
        "üìç –ê–¥—Ä–µ—Å: –≥. –í—ã–±–æ—Ä–≥, —É–ª. –ü—Ä–∏–º–æ—Ä—Å–∫–∞—è, –¥.40, –∫–≤. 14\n"
        "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +79212659800\n"
        "üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 08:00-22:00 (–±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö)"
    ),
    "‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": {
        "before": (
            "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ü–µ–¥—É—Ä–æ–π:</b>\n\n"
            "‚Ä¢ –ó–∞ —Å—É—Ç–∫–∏ –¥–æ —ç–ø–∏–ª—è—Ü–∏–∏ —Å–±—Ä–µ–π—Ç–µ –≤–æ–ª–æ—Å—ã –±—Ä–∏—Ç–≤–æ–π –ù–ê–ì–û–õ–û (–ª–∏—Ü–æ –∏ –∞—Ä–µ–æ–ª—ã —Å–æ—Å–∫–æ–≤ —Å–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–ø–∏–ª—è—Ü–∏–æ–Ω–Ω—ã–º "
            "–∫—Ä–µ–º–æ–º).\n"
            "‚Ä¢ –ù–µ –∑–∞–≥–æ—Ä–∞—Ç—å –∑–∞ 6-7 –¥–Ω–µ–π –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.\n"
            "‚Ä¢ –ó–∞ 3‚Äì4 –Ω–µ–¥–µ–ª–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –∫—É—Ä—Å–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä –∏—Å–∫–ª—é—á–∏—Ç—å –≤—Å–µ –≤–∏–¥—ã –¥–µ–ø–∏–ª—è—Ü–∏–∏ (–ø–∏–Ω—Ü–µ—Ç, –≤–æ—Å–∫, —Å–∞—Ö–∞—Ä, —ç–ø–∏–ª—è—Ç–æ—Ä, "
            "—ç–ª–µ–∫—Ç—Ä–æ—ç–ø–∏–ª—è—Ü–∏—è, —Å–∫—Ä–µ–±–æ–∫ –¥–ª—è –¥–µ–ø–∏–ª—è—Ü–∏–∏ –∏ –ø—Ä).\n"
            "‚Ä¢ –í –¥–µ–Ω—å –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –Ω–µ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥–µ–∑–æ–¥–æ—Ä–∞–Ω—Ç–æ–º, —Å–ø–∏—Ä—Ç–æ—Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –∏ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ (–º–∞—Å–ª–∞, "
            "–∫—Ä–µ–º—ã –∏ —Ç–¥) –≤ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö –∑–æ–Ω–∞—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.\n"
            "‚Ä¢ –ó–∞ 3‚Äì4 –¥–Ω—è –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∞–±—ã –¥–ª—è –∫–æ–∂–∏ –∏ –Ω–µ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∂—ë—Å—Ç–∫–∏–º–∏ —â–µ—Ç–∫–∞–º–∏.\n"
            "‚Ä¢ –ó–∞ 10‚Äì14 –¥–Ω–µ–π –¥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∞–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏ —Ç–µ—Ç—Ä–∞—Ü–∏–∫–ª–∏–Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã, "
            "–æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –≥—Ä—É–ø–ø–µ —Ñ—Ç–æ—Ä—Ö–∏–Ω–æ–ª–æ–Ω–æ–≤, —Ä–µ—Ç–∏–Ω–æ–∏–¥—ã –∏ —Ñ–æ—Ç–æ—Å–µ–Ω—Å–∏–±–∏–ª–∏–∑–∏—Ä—É—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n\n"
            "<i>–°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —É–ª—É—á—à–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</i>"
        ),
        "after": (
            "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:</b>\n\n"
            "‚Ä¢ –ù–µ —Ä–∞—Å–ø–∞—Ä–∏–≤–∞—Ç—å –∫–æ–∂—É (–≥–æ—Ä—è—á–∞—è –≤–∞–Ω–Ω–∞, —Å–∞—É–Ω–∞, –±–∞–Ω—è) –≤ —Ç–µ—á–µ–Ω–∏–µ 3‚Äì4 –¥–Ω–µ–π\n"
            "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∏—Ä—Ç–æ—Å–æ–¥–µ—Ä–∂–∞—â—É—é –∫–æ—Å–º–µ—Ç–∏–∫—É 3‚Äì4 –¥–Ω—è.\n"
            "‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫—Ä–∞–±—ã –¥–ª—è –∫–æ–∂–∏ –∏ –∂—ë—Å—Ç–∫–∏–µ —â—ë—Ç–∫–∏ 4 –¥–Ω—è\n"
            "‚Ä¢ –ù–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∫–æ—Å–º–µ—Ç–∏–∫—É —Å –≥–ª–∏–∫–æ–ª–µ–≤–æ–π –∫–∏—Å–ª–æ—Ç–æ–π –∏ —Ä–µ—Ç–∏–Ω–æ–ª–æ–º 7 –¥–Ω–µ–π\n"
            "‚Ä¢ –ù–µ –∑–∞–≥–æ—Ä–∞—Ç—å 14 –¥–Ω–µ–π\n"
            "‚Ä¢ –ù–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –¥–µ–ø–∏–ª—è—Ü–∏—é –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫—É—Ä—Å–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä (–≤–æ—Å–∫, —à—É–≥–∞—Ä–∏–Ω–≥, –ø–∏–Ω—Ü–µ—Ç, —ç–ø–∏–ª—è—Ç–æ—Ä)\n"
            "‚Ä¢ –ù–∞–Ω–æ—Å–∏—Ç—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–æ–Ω—ã –ë–µ–ø–∞–Ω—Ç–µ–Ω –∏–ª–∏ –ü–∞–Ω—Ç–µ–Ω–æ–ª\n"
            "‚Ä¢ –ü–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –Ω–∞ —É–ª–∏—Ü—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å SPF –Ω–µ –º–µ–Ω–µ–µ 30\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Å—Ç–∏ —Å–∫—Ä–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–æ–Ω –Ω–∞ 5‚Äì7 –¥–µ–Ω—å\n\n"
            "<i>–°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞—â–∏—Ç–∏—Ç –∫–æ–∂—É –æ—Ç –∫—Ä–∞—Å–Ω–æ—Ç—ã –∏ –≤—ã—Å—ã–ø–∞–Ω–∏–π!</i>"
        )
    },
    "üö´ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è": (
        "‚ö†Ô∏è <b>–ê–ë–°–û–õ–Æ–¢–ù–´–ï –ü–†–û–¢–ò–í–û–ü–û–ö–ê–ó–ê–ù–ò–Ø</b> (–∑–∞–ø—Ä–µ—â–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏):\n"
        "‚Ä¢ –ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –∏ –ª–∞–∫—Ç–∞—Ü–∏—è\n"
        "‚Ä¢ –û–Ω–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è (–≤ —Ç.—á. –≤ –∞–Ω–∞–º–Ω–µ–∑–µ)\n"
        "‚Ä¢ –≠–ø–∏–ª–µ–ø—Å–∏—è\n"
        "‚Ä¢ –°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç –≤ –¥–µ–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ\n"
        "‚Ä¢ –ö–æ–∂–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –≤ –∑–æ–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
        "  - –ü—Å–æ—Ä–∏–∞–∑\n"
        "  - –≠–∫–∑–µ–º–∞\n"
        "- –î–µ—Ä–º–∞—Ç–∏—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–∞–∑–µ\n"
        "  - –ì–µ—Ä–ø–µ—Å –≤ —Å—Ç–∞–¥–∏–∏ –æ–±–æ—Å—Ç—Ä–µ–Ω–∏—è\n"
        "‚Ä¢ –§–æ—Ç–æ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–∂–∏ (–∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞ —Å–≤–µ—Ç)\n"
        "‚Ä¢ –°–≤–µ–∂–∏–π –∑–∞–≥–∞—Ä (–º–µ–Ω–µ–µ 2 –Ω–µ–¥–µ–ª—å)\n"
        "‚Ä¢ –ò–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π\n\n"
        "‚öñÔ∏è <b>–û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–¢–ò–í–û–ü–û–ö–ê–ó–ê–ù–ò–Ø</b> (—Ç—Ä–µ–±—É—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—Ä–∞—á–∞):\n"
        "‚Ä¢ –í–∞—Ä–∏–∫–æ–∑–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–µ–Ω (–≤ –∑–æ–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏)\n"
        "‚Ä¢ –ö—É–ø–µ—Ä–æ–∑ (—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ –∑–≤—ë–∑–¥–æ—á–∫–∏)\n"
        "‚Ä¢ –†–æ–¥–∏–Ω–∫–∏ –∏ –ø–∏–≥–º–µ–Ω—Ç–Ω—ã–µ –ø—è—Ç–Ω–∞ –≤ –∑–æ–Ω–µ —ç–ø–∏–ª—è—Ü–∏–∏\n"
        "‚Ä¢ –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ—Å–µ–Ω—Å–∏–±–∏–ª–∏–∑–∏—Ä—É—é—â–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤:\n"
        "  - –ê–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏ (—Ç–µ—Ç—Ä–∞—Ü–∏–∫–ª–∏–Ω—ã, —Ñ—Ç–æ—Ä—Ö–∏–Ω–æ–ª–æ–Ω—ã)\n"
        "  - –†–µ—Ç–∏–Ω–æ–∏–¥—ã (–≤ —Ç.—á. –∫–æ—Å–º–µ—Ç–∏–∫–∞ —Å —Ä–µ—Ç–∏–Ω–æ–ª–æ–º)\n"
        "‚Ä¢ –ù–µ–¥–∞–≤–Ω—è—è –¥–µ–ø–∏–ª—è—Ü–∏—è –≤–æ—Å–∫–æ–º/—à—É–≥–∞—Ä–∏–Ω–≥ (–º–µ–Ω–µ–µ 3‚Äì4 –Ω–µ–¥–µ–ª—å)\n"
        "‚Ä¢ –°–≤–µ–∂–∏–µ —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂ –≤ –∑–æ–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
        "‚Ä¢ –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –≤ —Å—Ç–∞–¥–∏–∏ –æ–±–æ—Å—Ç—Ä–µ–Ω–∏—è\n\n"
        "<i>–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ª—é–±—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞!</i>"
    ),
    "‚ÑπÔ∏è –û —Å–∞–ª–æ–Ω–µ": (
        "üåü <b>–ù–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –æ–±–æ –º–Ω–µ</b> üåü\n\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ö—Ä–∏—Å—Ç–∏–Ω–∞, —è –º–∞—Å—Ç–µ—Ä —Å 3-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, –∏ –¥–ª—è –º–µ–Ω—è –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –í—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ —Å–µ–±—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ.\n\n"
        "‚òï <i>–ú–∞–ª–µ–Ω—å–∫–∏–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è:</i>\n"
        "–ü–æ–∫–∞ –í—ã –Ω–∞—Å–ª–∞–∂–¥–∞–µ—Ç–µ—Å—å –ø—Ä–æ—Ü–µ–¥—É—Ä–æ–π, –º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å —á–∞—à–µ—á–∫—É –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ –∏–∑ –Ω–∞—à–µ–π –∫–æ—Ñ–µ–º–∞—à–∏–Ω—ã –∏ —É–≥–æ—Å—Ç–∏—Ç—å—Å—è –∫–æ–Ω—Ñ–µ—Ç–∫–∞–º–∏\n\n"
        "üíÜ‚Äç‚ôÄÔ∏è <i>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</i>\n"
        "–ê–ø–ø–∞—Ä–∞—Ç Pioneer –Ω–∞ 1200 –í—Ç ‚Äì —ç—Ç–æ:\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ë–µ—Ä–µ–∂–Ω—ã–π —É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π\n"
        "‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
        "‚ú® –í–∞—à–∞ –∫—Ä–∞—Å–æ—Ç–∞ –∏ –∫–æ–º—Ñ–æ—Ä—Ç ‚Äì –º–æ–π –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!\n\n"
        "–ñ–¥—É –í–∞—Å –≤ –≥–æ—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ä–∏—Ç—å –í–∞–º –Ω–µ —Ç–æ–ª—å–∫–æ –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –∏ –ø—Ä–∏—è—Ç–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ—Ç–¥—ã—Ö–∞."
    )
}

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –ü–ï–†–ï–ú–ï–ù–ù–´–• –°–ï–°–°–ò–ò ---
os.makedirs("logs", exist_ok=True)
bot = AsyncTeleBot(TOKEN)
user_data = {}
user_sessions = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π, –∑–∞–º–µ–Ω—è–µ—Ç register_next_step_handler
user_states = {}


# --- –§–£–ù–ö–¶–ò–ò-–ü–û–ú–û–©–ù–ò–ö–ò (–°–ª—É–∂–µ–±–Ω–∞—è –ª–æ–≥–∏–∫–∞) ---
def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É"),
        KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–∞—Å—Ç–µ—Ä—É"),
        KeyboardButton("üí∞ –¶–µ–Ω—ã"),
        KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"),
        KeyboardButton("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"),
        KeyboardButton("üö´ –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è"),
        KeyboardButton("‚ÑπÔ∏è –û —Å–∞–ª–æ–Ω–µ"),
    ]
    markup.add(*buttons)
    return markup


def create_cancel_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∏—Ç—å'"""
    return ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å"))


async def set_bot_commands():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º")
    ]
    await bot.set_my_commands(commands)


def format_booking_message(user_id, for_admin=False):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏"""
    data = user_data.get(user_id)
    if not data:
        return "–î–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    try:
        procedures_list = ", ".join(
            f"{PROCEDURES[key]['name']}"
            for key in data["procedures"]
        )
        total_price = data['total_price']
    except KeyError as e:
        logging.error(f"KeyError in format_booking_message for user {user_id}: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."

    message = ""
    if for_admin:
        message += "üìå –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n"
    else:
        message += "üîé –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n"

    message += (
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üöª –ü–æ–ª: {data['gender']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üíÜ –ü—Ä–æ—Ü–µ–¥—É—Ä—ã: {procedures_list}\n"
    )

    if data.get("gender") == "–ú—É–∂—á–∏–Ω–∞ üë®":
        message += "<b>–í–Ω–∏–º–∞–Ω–∏–µ! –¶–µ–Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 20% –∏–∑-–∑–∞ –ø–æ–ª–∞.</b>\n"

    message += (
        f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price:.2f} —Ä—É–±.\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data['time']}\n"
    )

    if for_admin:
        message += f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}"
    else:
        message += "\n–í—Å—ë –≤–µ—Ä–Ω–æ?"

    return message


async def send_admin_notification(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if not ADMIN_CHAT_ID:
        logging.error("ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return False

    try:
        if user_id not in user_data:
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            return False

        message = format_booking_message(user_id, for_admin=True)
        if "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" in message:
            logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return False

        await bot.send_message(ADMIN_CHAT_ID, message, parse_mode="HTML")
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True

    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ({user_id}): {e}")
        return False


async def clean_old_sessions():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å.
    """
    while True:
        now = datetime.now()
        expired_users = []
        for user_id, session in user_sessions.items():
            if now - session['last_activity'] > timedelta(minutes=SESSION_TIMEOUT):
                expired_users.append(user_id)

        for user_id in expired_users:
            user_sessions.pop(user_id, None)
            user_data.pop(user_id, None)
            user_states.pop(user_id, None)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            logging.info(f"–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞ –∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        await asyncio.sleep(60)


# --- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –ò –ö–û–õ–õ–ë–≠–ö–û–í ---
@bot.message_handler(commands=['start'])
async def send_welcome(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user_id = message.chat.id
    user_sessions[user_id] = {
        'active': True,
        'last_activity': datetime.now()
    }
    if user_id not in user_data:
        user_data[user_id] = {"procedures": []}

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    user_states.pop(user_id, None)

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")

    await bot.send_message(
        user_id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –ª–∞–∑–µ—Ä–Ω–æ–π —ç–ø–∏–ª—è—Ü–∏–∏! üè©",
        reply_markup=create_main_menu()
    )


@bot.message_handler(func=lambda msg: True)
async def update_user_activity(message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫."""
    user_id = message.chat.id
    if user_id in user_sessions:
        user_sessions[user_id]['last_activity'] = datetime.now()

    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await handle_main_menu(message)
    elif message.text in STATIC_MESSAGES:
        await handle_static_messages(message)
    elif message.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É":
        await start_booking(message)
    elif message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–∞—Å—Ç–µ—Ä—É":
        await start_ask_master(message)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    elif user_states.get(user_id) == 'awaiting_name':
        await process_name_step(message)
    elif user_states.get(user_id) == 'awaiting_gender':
        await process_gender_step(message)
    elif user_states.get(user_id) == 'awaiting_phone':
        await process_phone_step(message)
    elif user_states.get(user_id) == 'awaiting_question':
        await process_ask_master(message)
    elif user_states.get(user_id) == 'awaiting_admin_reply':
        # –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–≤–µ—á–∞–µ–º
        original_user_id = user_data[user_id].get('reply_to_user_id')
        if original_user_id:
            await process_admin_reply_step(message, original_user_id)


async def handle_main_menu(message):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"."""
    user_id = message.chat.id
    user_data.pop(user_id, None)
    user_states.pop(user_id, None)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await send_welcome(message)


async def handle_static_messages(message):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    user_id = message.chat.id
    user_states.pop(user_id, None)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    text = STATIC_MESSAGES[message.text]
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª: {message.text}")
    if isinstance(text, dict):
        await bot.send_message(user_id, text["before"], parse_mode="HTML")
        await bot.send_message(user_id, text["after"], parse_mode="HTML")
    else:
        await bot.send_message(user_id, text, parse_mode="HTML")


async def start_booking(message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏"""
    user_id = message.chat.id
    user_data[user_id] = {"procedures": []}
    user_states[user_id] = 'awaiting_name'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏.")
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=create_cancel_menu()
    )


# --- –ë–õ–û–ö –õ–û–ì–ò–ö–ò –ó–ê–ü–ò–°–ò ---
async def process_name_step(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    user_id = message.chat.id

    name = message.text.strip()
    if not (2 <= len(name) <= 50):
        await bot.send_message(
            user_id,
            "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ (–æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –µ—â–µ —Ä–∞–∑:",
            reply_markup=create_cancel_menu()
        )
        return  # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∂–¥–µ–º –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞

    allowed_chars = set(" -',")
    if not all(char.isalpha() or char in allowed_chars for char in name):
        await bot.send_message(
            user_id,
            "‚ùå –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã: - ' ,\n–ü—Ä–∏–º–µ—Ä—ã –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∏–º–µ–Ω:\n- –ê–Ω–Ω–∞-–ú–∞—Ä–∏—è\n- –ò–≤–∞–Ω–æ–≤, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n- O'Connor\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –µ—â–µ —Ä–∞–∑:",
            reply_markup=create_cancel_menu()
        )
        return  # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    user_data[user_id]["name"] = name
    user_states[user_id] = 'awaiting_gender'  # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ú—É–∂—á–∏–Ω–∞ üë®"), KeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞ üë©"))
    markup.add(KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å"))

    await bot.send_message(
        user_id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=markup
    )


async def process_gender_step(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    user_id = message.chat.id

    gender_choice = message.text
    if gender_choice not in ["–ú—É–∂—á–∏–Ω–∞ üë®", "–ñ–µ–Ω—â–∏–Ω–∞ üë©"]:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("–ú—É–∂—á–∏–Ω–∞ üë®"), KeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞ üë©"))
        markup.add(KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å"))
        await bot.send_message(
            user_id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=markup
        )
        return  # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    user_data[user_id]["gender"] = gender_choice
    user_states[user_id] = 'awaiting_phone'  # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (11 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: 79123456789):",
        reply_markup=create_cancel_menu()
    )


async def process_phone_step(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = message.chat.id

    phone_digits = ''.join(filter(str.isdigit, message.text))
    if len(phone_digits) != 11 or phone_digits[0] not in ['7', '8']:
        await bot.send_message(
            user_id,
            "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7 –∏–ª–∏ 8.\n–ü—Ä–∏–º–µ—Ä: 79123456789\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=create_cancel_menu()
        )
        return  # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_digits}")

    user_data[user_id]["phone"] = f"+7{phone_digits[1:]}"
    user_states.pop(user_id, None)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–≤–æ–¥, —É–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await show_procedures_menu(user_id)


async def show_procedures_menu(chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    user_data.setdefault(chat_id, {})
    user_data[chat_id].setdefault("procedures", [])
    user_states.pop(chat_id, None)

    markup = InlineKeyboardMarkup()
    selected_procedures = user_data[chat_id].get("procedures", [])

    # 1. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–ª–µ–∫—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    complex_keys = ["comp1", "comp2", "comp3"]
    for key in complex_keys:
        markup.add(
            InlineKeyboardButton(
                f"{'‚úÖ' if key in selected_procedures else '‚óªÔ∏è'} {PROCEDURES[key]['name']}",
                callback_data=f"proc_{key}"
            )
        )

    # 2. –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫—É
    other_keys = [key for key in PROCEDURES if key not in complex_keys]
    for i in range(0, len(other_keys), 2):
        row_buttons = []
        key1 = other_keys[i]
        button1 = InlineKeyboardButton(
            f"{'‚úÖ' if key1 in selected_procedures else '‚óªÔ∏è'} {PROCEDURES[key1]['name']}",
            callback_data=f"proc_{key1}"
        )
        row_buttons.append(button1)

        if i + 1 < len(other_keys):
            key2 = other_keys[i + 1]
            button2 = InlineKeyboardButton(
                f"{'‚úÖ' if key2 in selected_procedures else '‚óªÔ∏è'} {PROCEDURES[key2]['name']}",
                callback_data=f"proc_{key2}"
            )
            row_buttons.append(button2)

        markup.row(*row_buttons)

    markup.add(InlineKeyboardButton("üîπ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="procedures_done"))
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking"))
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)::", reply_markup=markup)


async def update_procedures_menu(message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    user_id = message.chat.id
    if user_id not in user_data or "procedures" not in user_data[user_id]:
        await bot.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                               reply_markup=create_main_menu())
        return

    markup = InlineKeyboardMarkup()
    selected_procedures = user_data[user_id].get("procedures", [])

    # 1. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–ª–µ–∫—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    complex_keys = ["comp1", "comp2", "comp3"]
    for key in complex_keys:
        markup.add(
            InlineKeyboardButton(
                f"{'‚úÖ' if key in selected_procedures else '‚óªÔ∏è'} {PROCEDURES[key]['name']}",
                callback_data=f"proc_{key}"
            )
        )

    # 2. –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫—É
    other_keys = [key for key in PROCEDURES if key not in complex_keys]
    for i in range(0, len(other_keys), 2):
        row_buttons = []
        key1 = other_keys[i]
        button1 = InlineKeyboardButton(
            f"{'‚úÖ' if key1 in selected_procedures else '‚óªÔ∏è'} {PROCEDURES[key1]['name']}",
            callback_data=f"proc_{key1}"
        )
        row_buttons.append(button1)

        if i + 1 < len(other_keys):
            key2 = other_keys[i + 1]
            button2 = InlineKeyboardButton(
                f"{'‚úÖ' if key2 in selected_procedures else '‚óªÔ∏è'} {PROCEDURES[key2]['name']}",
                callback_data=f"proc_{key2}"
            )
            row_buttons.append(button2)

        markup.row(*row_buttons)

    markup.add(InlineKeyboardButton("üîπ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="procedures_done"))
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking"))

    try:
        await bot.edit_message_text(chat_id=user_id, message_id=message.message_id,
                                    text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=markup)
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º.
@bot.callback_query_handler(func=lambda call: call.data.startswith("proc_"))
async def toggle_procedure_selection(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ–¥—É—Ä—ã"""
    user_id = call.message.chat.id
    await bot.answer_callback_query(call.id)

    if user_id not in user_data:
        await bot.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=create_main_menu())
        return

    procedure_key = call.data.split("_")[1]
    procedures = user_data[user_id].setdefault("procedures", [])
    if procedure_key in procedures:
        procedures.remove(procedure_key)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–±—Ä–∞–ª –ø—Ä–æ—Ü–µ–¥—É—Ä—É {procedure_key}.")
    else:
        procedures.append(procedure_key)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –ø—Ä–æ—Ü–µ–¥—É—Ä—É {procedure_key}.")

    await update_procedures_menu(call.message)


@bot.callback_query_handler(func=lambda call: call.data == "procedures_done")
async def finish_procedures_selection(call):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä"""
    user_id = call.message.chat.id
    await bot.answer_callback_query(call.id)
    try:
        if user_id not in user_data:
            await bot.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=create_main_menu())
            return

        procedures = user_data[user_id].setdefault("procedures", [])
        if not procedures:
            await bot.send_message(user_id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É!")
            return

        valid_procedures = [key for key in procedures if key in PROCEDURES]
        if not valid_procedures:
            await bot.send_message(user_id, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É!")
            return

        user_data[user_id]["procedures"] = valid_procedures
        total_price = sum(PROCEDURES[key]["price"] for key in valid_procedures)
        if user_data[user_id].get("gender") == "–ú—É–∂—á–∏–Ω–∞ üë®":
            total_price *= 1.2

        user_data[user_id]["total_price"] = total_price
        await show_date_selection(call.message)
    except KeyError as e:
        logging.error(f"–û—à–∏–±–∫–∞ KeyError –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                               reply_markup=create_main_menu())
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=create_main_menu())


async def show_date_selection(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã"""
    user_id = message.chat.id
    if user_id not in user_data:
        await bot.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                               reply_markup=create_main_menu())
        return

    today = datetime.now()
    dates = [(today + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(1, 31)]
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º row_width –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (1)
    markup = InlineKeyboardMarkup(row_width=3)  # –ú–µ–Ω—è–µ–º row_width –¥–ª—è –¥–∞—Ç
    markup.add(*[InlineKeyboardButton(date, callback_data=f"date_{date}") for date in dates])
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking"))
    try:
        await bot.edit_message_text(chat_id=user_id, message_id=message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                                    reply_markup=markup)
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("date_"))
async def select_appointment_date(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    user_id = call.message.chat.id
    await bot.answer_callback_query(call.id)
    if user_id not in user_data:
        await bot.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=create_main_menu())
        return
    user_data[user_id]["date"] = call.data.split("_")[1]
    await show_time_selection(call.message)


async def show_time_selection(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = message.chat.id
    if user_id not in user_data:
        await bot.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                               reply_markup=create_main_menu())
        return

    times = [f"{hour}:{minute:02d}" for hour in range(8, 22) for minute in (0, 30)]

    markup = InlineKeyboardMarkup(row_width=4)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º row_width = 4
    buttons = [InlineKeyboardButton(time, callback_data=f"time_{time}") for time in times]
    markup.add(*buttons)
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking"))

    try:
        await bot.edit_message_text(chat_id=user_id, message_id=message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
                                    reply_markup=markup)
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("time_"))
async def select_appointment_time(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = call.message.chat.id
    await bot.answer_callback_query(call.id)
    if user_id not in user_data:
        await bot.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=create_main_menu())
        return
    user_data[user_id]["time"] = call.data.split("_")[1]
    await show_confirmation(call.message)


async def show_confirmation(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    user_id = message.chat.id
    if user_id not in user_data or "procedures" not in user_data[user_id]:
        await bot.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                               reply_markup=create_main_menu())
        return

    confirmation_text = format_booking_message(user_id)
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_booking"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking"),
    )

    try:
        await bot.edit_message_text(
            chat_id=user_id,
            message_id=message.message_id,
            text=confirmation_text,
            reply_markup=markup,
            parse_mode="HTML"
        )
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await bot.send_message(user_id, confirmation_text, reply_markup=markup, parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: call.data == "confirm_booking")
async def confirm_appointment(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏."""
    user_id = call.message.chat.id
    await bot.answer_callback_query(call.id)
    if user_id not in user_data:
        await bot.send_message(user_id, "‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=create_main_menu())
        return

    final_message_text = (
            f"‚úÖ –ó–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n–î–µ—Ç–∞–ª–∏:\n"
            f"üë§ –ò–º—è: {user_data[user_id]['name']}\n"
            f"üöª –ü–æ–ª: {user_data[user_id]['gender']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[user_id]['phone']}\n"
            f"üíÜ –ü—Ä–æ—Ü–µ–¥—É—Ä—ã: " + ", ".join([f"{PROCEDURES[key]['name']}"
                                          for key in user_data[user_id]["procedures"]]) + "\n" +
            (f"<b>–í–Ω–∏–º–∞–Ω–∏–µ! –¶–µ–Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 20% –∏–∑-–∑–∞ –ø–æ–ª–∞.</b>\n" if user_data[user_id].get(
                "gender") == "–ú—É–∂—á–∏–Ω–∞ üë®" else "") +
            f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {user_data[user_id]['total_price']:.2f} —Ä—É–±.\n"
            f"üìÖ –î–∞—Ç–∞: {user_data[user_id]['date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {user_data[user_id]['time']}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π!\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ."
    )

    try:
        await bot.delete_message(chat_id=user_id, message_id=call.message.message_id)
        await bot.send_message(
            chat_id=user_id,
            text=final_message_text,
            reply_markup=create_main_menu(),
            parse_mode="HTML"
        )
        await send_admin_notification(user_id)
        user_data.pop(user_id, None)
        user_states.pop(user_id, None)
        logging.info(f"–ó–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "cancel_booking")
async def cancel_appointment(call):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏"""
    user_id = call.message.chat.id
    await bot.answer_callback_query(call.id)
    await bot.send_message(user_id, "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=create_main_menu())
    user_data.pop(user_id, None)
    user_states.pop(user_id, None)
    logging.info(f"–ó–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")


# --- –õ–û–ì–ò–ö–ê –î–õ–Ø –í–û–ü–†–û–°–û–í –ú–ê–°–¢–ï–†–£ ---
@bot.message_handler(func=lambda msg: msg.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–∞—Å—Ç–µ—Ä—É")
async def start_ask_master(message):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –º–∞—Å—Ç–µ—Ä–æ–º"""
    user_id = message.chat.id
    if not ADMIN_CHAT_ID:
        await bot.send_message(user_id, "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–∞—Å—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                               reply_markup=create_main_menu())
        logging.error("ADMIN_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –º–∞—Å—Ç–µ—Ä–æ–º.")
        return

    user_states[user_id] = 'awaiting_question'
    await bot.send_message(
        user_id,
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –º–∞—Å—Ç–µ—Ä—É.",
        reply_markup=create_cancel_menu()
    )


async def process_ask_master(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
    user_id = message.chat.id

    if not message.text:
        await bot.send_message(user_id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
                               reply_markup=create_cancel_menu())
        return

    try:
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_{user_id}"),
            InlineKeyboardButton("üö´ –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ignore_{user_id}")
        )

        await bot.send_message(
            ADMIN_CHAT_ID,
            f"üë§ **–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n\n{message.text}\n\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{user_id}`",
            parse_mode="Markdown",
            reply_markup=markup
        )
        await bot.send_message(user_id, "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–∞—Å—Ç–µ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                               reply_markup=create_main_menu())
        user_states.pop(user_id, None)  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logging.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∞.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç {user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        await bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                               reply_markup=create_cancel_menu())


@bot.callback_query_handler(func=lambda call: call.data.startswith("reply_to_"))
async def handle_admin_reply_button(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'"""
    admin_id = call.message.chat.id
    original_user_id = int(call.data.split("_")[2])

    user_states[admin_id] = 'awaiting_admin_reply'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_data[admin_id] = {'reply_to_user_id': original_user_id}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞

    await bot.edit_message_text(chat_id=admin_id, message_id=call.message.message_id,
                                text=f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID `{original_user_id}`.\n\n"
                                     f"–ù–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å', —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å.", parse_mode="Markdown")
    await bot.send_message(
        admin_id,
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
        reply_markup=create_cancel_menu()
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("ignore_"))
async def handle_admin_ignore_button(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å'"""
    admin_id = call.message.chat.id
    original_user_id = int(call.data.split("_")[1])

    await bot.delete_message(chat_id=admin_id, message_id=call.message.message_id)
    await bot.send_message(
        admin_id,
        f"üö´ –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID `{original_user_id}` –±—ã–ª –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.",
        reply_markup=create_main_menu(),
        parse_mode="Markdown"
    )
    logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {original_user_id}.")


async def process_admin_reply_step(message, original_user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    admin_id = message.chat.id

    try:
        reply_text = message.text
        if not reply_text:
            await bot.send_message(admin_id, "‚ùå –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:",
                                   reply_markup=create_cancel_menu())
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            original_user_id,
            "üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–∞—Å—Ç–µ—Ä–∞:\n\n" + reply_text,
            reply_markup=create_main_menu()
        )
        await bot.send_message(
            admin_id,
            f"‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID `{original_user_id}`.",
            reply_markup=create_main_menu(),
            parse_mode="Markdown"
        )
        user_states.pop(admin_id, None)  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {original_user_id}.")

    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç {admin_id} –∫ {original_user_id}: {e}")
        await bot.send_message(admin_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.", reply_markup=create_main_menu())


async def start_bot():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π"""
    await set_bot_commands()
    await asyncio.gather(
        bot.infinity_polling(skip_pending=True),
        clean_old_sessions()
    )


if __name__ == '__main__':
    try:
        asyncio.run(start_bot())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        sys.exit(1)
